/* Python TestNode
#include <lib_py.h>
#include "Tvpython.h"

PythonBase* AllocPythonBase(PythonLibrary* lib) {
    GePythonGIL gil;
    PythonBase* base = lib->Alloc();
    if (!base) return nullptr;
    if (!lib->Initiated(base)) {
        lib->Free(base);
        return nullptr;
    }
    return base;
}

void FreePythonBase(PythonLibrary* lib, PythonBase*& base) {
    GePythonGIL gil;
    lib->Free(base);
}

class TvPythonData : public TvOperatorData {

    typedef TvOperatorData super;

    PythonLibrary lib;
    PythonBase* base;
    _PyObject* pyExecute;

public:

    static NodeData* Alloc() { return NewObjClear(TvPythonData); }

    TvPythonData() : pyExecute(nullptr), base(AllocPythonBase(&lib)) {}

    ~TvPythonData() {
        FreePython();
        if (base) FreePythonBase(&lib, base);
        base = nullptr;
    }

    void FreePython() {
        GePythonGIL gil;
        if (pyExecute) lib.DecRef(pyExecute);
        pyExecute = nullptr;
    }

    /* TvOperatorData Overrides * /

    virtual Bool Execute(TvNode* host, TvNode* root, BaseList2D* context) {
        GePrint(__FUNCTION__);
        if (!host) return false;
        if (!base) {
            GePrint("No base");
            return false;
        }
        if (!pyExecute) {
            GePrint("No pyExecute");
            return false;
        }
        GePythonGIL gil;
        lib.SetGeListNode(base, "host", host, true);
        lib.SetGeListNode(base, "context", context, true);
        _PyObject* re = lib.CallFunction(pyExecute);
        return true;
    }

    /*
    virtual Bool AskCondition(TvNode* host, TvNode* root, BaseList2D* context);

    virtual Bool AcceptChild(TvNode* host, TvNode* other);

    virtual Bool AllowRemoveChild(TvNode* host, TvNode* child);
    * /

    /* NodeData Overrides * /

    virtual Bool Message(GeListNode* gNode, Int32 type, void* pData);

};

Bool TvPythonData::Message(GeListNode* gNode, Int32 type, void* pData) {
    if (!gNode) return false;
    TvNode* tNode = (TvNode*) gNode;

    switch (type) {
        case MSG_DESCRIPTION_COMMAND: {
            DescriptionCommand* data = (DescriptionCommand*) pData;
            if (data->id == TVPYTHON_COMPILE) {
                FreePython();
                if (!base) return true;
                GePrint("Evaluating Python Source.");

                BaseContainer* bc = ((TvNode*) gNode)->GetDataInstance();
                String code = bc->GetString(TVPYTHON_CODE);

                GePythonGIL gil;
                if (!lib.Run(code, base, tNode->GetName(), XPYCOMPILERINPUT_FILE)) {
                    lib.ErrPrint();
                }
                else {
                    _PyObject* obj;

                    obj = lib.GetObject(base, "Execute");
                    GePrint("Got A PyObject..");
                    if (obj && lib.FunctionCheck(obj)) {
                        GePrint("> Its a function !");
                        lib.IncRef(obj);
                        pyExecute = obj;
                    }

                }
                return true;
            }
            break;
        }
    }
    return super::Message(gNode, type, pData);
}

static Bool RegisterTvPython() {
    return TvRegisterOperatorPlugin(
        Tvpython, GeLoadString(IDC_TVPYTHON),
        TVPLUGIN_CONDITION | TVPLUGIN_EXPRESSION, TvPythonData::Alloc,
        "Tvpython", AutoBitmap("Tvpython.png"), 0);
}
*/
